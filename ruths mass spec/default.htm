<html>
	<head>
		<title>Simulated Mass Spec Generator</title>
		<link rel="stylesheet" type="text/css" href="mystyles.css">
			<link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
	</head>
		
	<body>
		
		<h1 align='center'>Simulated Mass Spec Generator</h1>
		<div id='intro' align='center'>This page makes Mass Spectrometry Plots using data inputted.</div>
		<br><div id='wrapper'>
			
			<div id='datainput'>
			<table>
				<tr><td>Graph Name</td><td><input type="text" id="graphName"></input></td></tr>
				<tr><td>Min xAxis</td><td><input type="text" id="minXVal"></input></td></tr>
				<tr><td>Max xAxis</td><td><input type="text" id="maxXVal"></input></td></tr>
	
				<tr>
					<td>Abundance Type (y-axis label)</td>
					<td><input type="radio" name="yaxis" value="percentage" checked>Percentage</input><br>
						<input type="radio" name="yaxis" value="relative">Relative</input>
					</td>
				</tr>
			</table>
			<input type="button" id="redraw" onclick="reDrawGraph()" value="Redraw Graph"></input>
			<hr align="left">
			Please input details of each molecule fragment:
			<table>
				<tr><td>Fragment:</td><td><input type="text" id="elementFragment"></input></td></tr>
				<tr><td>Mass:</td><td><input type="text" id="mass"></input></td></tr>
				<tr><td>Abundance:</td><td><input type="text" id="abundance"></input></td></tr>
				
			</table>
			<input type="button" id="submit" onclick="addRow()" value="Submit"></input>
			<hr align="left">
			Table below will fill up with data
			<table id="massSpecData">
				<thead>
					<tr><th>Fragment</th><th>Mass</th><th>Abundance</th><th>Delete?</th></tr>
				</thead>
				<tbody>
					<tr id="row0"></tr> 
				</tbody>
			</table><br>
			<hr align="left"><br></div>
			<div id="container" style="width:640px; height:480px;"></div>
		</div>	
	</body>
	
	<!-- Import Useful Libraries -->
	<script src="http://code.jquery.com/jquery-1.11.3.min.js"></script>
    <script src="highcharts.js"></script>
	<script src="exporting.js"></script>
	<script>
	
	//when the page is ready, run this...	
	$(document).ready(function(){
			
		logToServer("RMS: page ready");
		reDrawGraph();

	});

	//returns the maximum X value if specified.
	function getMaxX(){
		
		var maxX;
		if ($('input#maxXVal').val().length != 0 ){
			maxX = parseInt($('input#maxXVal').val());
		}
		return maxX;
	}
	
	//returns the minimum X value, if specified. 
	function getMinX(){
		
		var minX;
		if ($('input#minXVal').val().length != 0 ){
			minX = parseInt($('input#minXVal').val()) + 1;
		}
		return minX;
	}
	
	//sets the YMax to 100 if a percentage. (Possibly unused)
	function getYMax(){
		
		var ymax = null;
			if ($('input[name=yaxis]:checked').val() === "percentage"){
			ymax = 100;	
		}
		return ymax;
	}
	
	//sets the y-Axis label to relative or percentage abundance
	function getAbundanceType(){
		
		var abundanceType = $('input[name=yaxis]:checked').val();
		return abundanceType;
	
	}
	
	//enables user to specify title on graph.
	function getNameofGraph(){
		
		var graphName = "";
		if ($("input#graphName").val().length != 0){
			graphName = $("input#graphName").val();
		}
		return graphName;
	}
	
	//reads the table of data, user put in creates an array of arrays to push back into highcharts.
	function getDataFromTable()
	{
		var dataTable = [];
		
		for (i=1; i<=findHighestRow(); i++) {
		
			var massCell = parseInt($('table#massSpecData tbody tr#row' + i + ' td.ma').text())
			var abunCell = parseInt($('table#massSpecData tbody tr#row' + i + ' td.ab').text())
			if (isNaN(massCell) || isNaN(abunCell)) {
				//console.log ("massCell or abunCell is NaN")
			} else {
				dataTable.push([massCell,abunCell]);
			}
		}
		logToServer ("RMS: result of getDataFromTable " + dataTable );
		return dataTable;
	}
	
	//this gets called when user presses redraw button. Most of this is highcharts invocation.
	function reDrawGraph()
	{
	    logToServer("RMS: Entered Redraw");
		
		var myData = getDataFromTable();

		$(function () {
		    $('#container').highcharts({
		        chart: {
		            type: 'column',
					spacing: [50,50,30,30]
		        },
		        title: {
		            text: getNameofGraph()
		        },
		        xAxis: {
		            title: {
		                text: 'm/z'
		            },
					min: getMinX(),
					max: getMaxX(),
					allowDecimals: false
		        },
		        yAxis: {
		            title:{
		                text: getAbundanceType() + ' abundance'
		            },
					lineWidth:1
		        },
		        legend:{
		            enabled: false
		        },
		        plotOptions:{
		            series:{
		                pointWidth: 2,
		                dataLabels: {
		                    align: 'right',
		                    enabled: true
		                }
		            }
		        },
		        series: [{
		            data: myData
		        }],
		        exporting: {
		            enabled: true
		        }

		    });
		});
		
	}
	
	//adds a row to the datatable on the client side. Once done, redraw the graph. 		
	function addRow(){
			
			logToServer("RMS: addRow called");
			
			var elementFragment = $("input#elementFragment").val();
			var mass = $("input#mass").val();
			var abundance = $("input#abundance").val();
			var currentLastRow = findHighestRow();
			var nextRow = currentLastRow + 1;
			
			logToServer( "RMS: " + elementFragment + "~" + mass + "~" + abundance);
		
			$('table#massSpecData tr:last').after('<tr id="row' + nextRow + '"><td>' + elementFragment + '</td><td class="ma">' + mass + '</td><td class="ab">' + abundance + '</td><td><button type="submit" onclick="delRow('+ nextRow + ')">Delete</button></td></tr>' );
			
			reDrawGraph();
			
		}
	
	//deletes a row from the datatable. Once done, redraw the graph
	function delRow(rowNo){
		logToServer("RMS: delRow called " + rowNo);
		$('table#massSpecData tr#row' + rowNo).remove();
		reDrawGraph();
	}	
	
	//calculates the row number to add next. 
	function findHighestRow(){
		
		var number = 0;
		$("table#massSpecData tbody tr").each( function() { 
						var id = $(this).attr('id'); 
						id = id.replace("row", "");
						if (parseInt(id) > number) {
							number = parseInt(id);
							}
						});
		return number;
	}
	
	//this function logs to my remote server.
	function logToServer(msg){
			
		//client side time 
		var now  = new Date
		var audit = now.toISOString() + "|" + msg
		
		//send to server.
		$.ajax({
			type: 'GET',
			url: 'http://daed.duckdns.org/log.aspx?data=' + audit,
		})
		
		return true;
	
	}
	</script>
		
</html>

